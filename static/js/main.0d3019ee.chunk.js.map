{"version":3,"sources":["logo.svg","components/OpentokForm.js","components/NavBar.js","util/index.js","components/ChartContainer.js","components/Loading.js","components/ErrorMessage.js","components/charts/UsageByDay.js","components/charts/helpers/round.js","components/charts/UsageByLocation.js","components/charts/UsageByBrowser.js","components/charts/UsageByBrowserVersion.js","components/charts/UsageBySdkVersion.js","components/charts/UsageBySdkDistribution.js","components/charts/LatencyByCountry.js","components/charts/FailuresBySdkType.js","components/ProjectSideBar.js","components/charts/FailuresByBrowser.js","components/charts/BitrateByCountry.js","components/ProjectReport.js","components/SessionSideBar.js","components/sessions/StreamStats.js","components/EmptyGraph.js","components/sessions/publishers/PublisherVideoBitRateStats.js","components/sessions/BrowserStats.js","components/sessions/BrowserVersionStats.js","components/sessions/CountryStats.js","components/sessions/SdkTypeStats.js","components/sessions/SdkVersionStats.js","components/sessions/publishers/PublisherVideoPacketLossStats.js","components/sessions/publishers/PublisherVideoLatencyStats.js","components/sessions/subscribers/SubscriberVideoBitRateStats.js","components/sessions/subscribers/SubscriberVideoPacketLossStats.js","components/sessions/subscribers/SubscriberVideoLatencyStats.js","components/sessions/publishers/PublisherAudioBitRateStats.js","components/sessions/publishers/PublisherAudioPacketLossStats.js","components/sessions/publishers/PublisherAudioLatencyStats.js","components/sessions/subscribers/SubscriberAudioBitRateStats.js","components/sessions/subscribers/SubscriberAudioPacketLossStats.js","components/sessions/subscribers/SubscriberAudioLatencyStats.js","components/sessions/connections/ConnectionStreamsTable.js","components/SessionReport.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","OpentokForm","handleSubmit","bind","changeQueryType","localStorage","removeItem","state","queryType","sessionIdDisable","event","preventDefault","formData","Array","prototype","slice","call","target","filter","el","name","reduce","form","value","setItem","JSON","stringify","this","props","history","push","setState","disableState","className","src","logo","alt","onSubmit","htmlFor","id","type","placeholder","required","onChange","defaultValue","disabled","React","Component","NavBar","href","title","data-toggle","data-target","aria-controls","aria-expanded","aria-label","projectId","sessionId","getToken","apiKey","apiSecret","currentTime","Math","floor","Date","jwt","sign","iss","ist","iat","exp","ChartContainer","scrollId","titleIcon","children","Loading","ErrorMessage","error","UsageByDay","query","gql","moment","subtract","loading","data","message","resources","get","labels","map","item","intervalStart","format","datasets","label","backgroundColor","round","decimals","Number","UsageByLocation","distinctCountries","x","country","countryData","forEach","subscribedMinutes","usage","streamedSubscribedMinutes","otherData","numOr0","n","isNaN","otherValues","a","b","Object","entries","subscribedCountryData","getSubscribedData","concat","chartType","width","height","legendToggle","UsageByBrowser","distinctBrowsers","browser","browserData","keys","values","UsageByBrowserVersion","browserVersion","propName","UsageBySdkVersion","distinctData","sdkVersion","subscribedData","UsageBySdkDistribution","sdkType","LatencyByCountry","FailuresBySdkType","ProjectSideBar","FailuresByBrowser","BitrateByCountry","ProjectReport","getProject","parse","getItem","project_id","project_secret","query_type","session_id","projectSecret","client","token","ApolloClient","link","HttpLink","uri","urlJoin","headers","cache","InMemoryCache","typeId","data-spy","data-offset","SessionSideBar","StreamStats","publisherMinutes","subscriberMinutes","toString","EmptyGraph","PublisherVideoBitRateStats","convertStreamArrayToChartData","meeting","colors","colorIndex","acc","streamData","streamStatsArray","length","color","shortStreamId","stream","streamId","substring","chartData","borderColor","fill","streamStats","videoBitrateKbps","createdAt","y","meetingArray","meetingWithMostStats","largestStatsCount","statsCount","pubResources","graph","meetingResources","streamChartData","options","scales","yAxes","scaleLabel","display","labelString","xAxes","distribution","time","unit","displayFormats","minute","BrowserStats","obj","connectionResources","BrowserVersionStats","CountryStats","SdkTypeStats","SdkVersionStats","PublisherVideoPacketLossStats","videoPacketLoss","PublisherVideoLatencyStats","videoLatencyMs","SubscriberVideoBitRateStats","subResources","SubscriberVideoPacketLossStats","SubscriberVideoLatencyStats","PublisherAudioBitRateStats","audioBitrateKbps","PublisherAudioPacketLossStats","audioPacketLoss","PublisherAudioLatencyStats","audioLatencyMs","SubscriberAudioBitRateStats","SubscriberAudioPacketLossStats","SubscriberAudioLatencyStats","ConnectionStreamsTable","createTable","connectionData","table","i","j","key","colSpan","connection","index","connectionDetails","connectionId","scope","SessionReport","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d3019ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './../logo.svg';\n\nclass OpentokForm extends React.Component {\n  constructor() {\n    super();\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.changeQueryType = this.changeQueryType.bind(this);\n    localStorage.removeItem('project');\n    localStorage.removeItem('session');\n\n    this.state = {\n      queryType: 'project',\n      sessionIdDisable: true\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    var formData = Array.prototype.slice.call(event.target).filter(el => el.name).reduce((form, el) => ({...form,[el.name]: el.value,}), {})\n    if(formData['query_type'] === 'project'){\n      // Submit to ProjectReport\n      localStorage.setItem('project', JSON.stringify(formData))\n      this.props.history.push(\"/project\")\n    }else{\n      // Submit to SessionReport`\n      localStorage.setItem('session', JSON.stringify(formData))\n      this.props.history.push(\"/session\")\n    }\n  }\n\n  changeQueryType(event) {\n    var queryType = event.target.value;\n    this.setState({ queryType: queryType });\n    var disableState = (queryType === 'session') ? false : true;\n    this.setState({ sessionIdDisable: disableState });\n  }\n\n  render() {\n    return (\n      <div className=\"container h-100\">\n        <div className=\"row align-items-center h-100 my-5 py-5\">\n          <div className=\"col-6 mx-auto\">\n            <div className=\"jumbotron bg-light py-4\">\n              <h3 className=\"text-center\">\n                <img src={logo} className=\"w-25\" alt=\"logo\" />\n                <br/>\n                Opentok Insights API Graph\n              </h3>\n              <hr />\n              <form onSubmit={this.handleSubmit}>\n                <div className=\"form-group\">\n                  <label htmlFor=\"project_id\">Project ID</label>\n                  <input id=\"project_id\" name=\"project_id\" type=\"text\" className=\"form-control\" placeholder=\"Project ID\" required />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"project_secret\">Project Secret</label>\n                  <input id=\"project_secret\" name=\"project_secret\" type=\"text\" className=\"form-control\" placeholder=\"Project Secret\" required />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"query_type\">Query Type</label>\n                  <select className=\"custom-select\" onChange={this.changeQueryType.bind(this)} value={this.state.queryType} name=\"query_type\" required >\n                    <option value=\"project\" defaultValue>Project Level</option>\n                    <option value=\"session\">Session Level</option>\n                  </select>\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"session_id\">Session ID</label>\n                  <input id=\"session_id\" name=\"session_id\" type=\"text\" className=\"form-control\" placeholder=\"Tokbox Session ID\" disabled={this.state.sessionIdDisable} />\n                </div>\n                <div className=\"text-center\">\n                  <button className=\"btn btn-primary text-uppercase\">View Stats</button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default OpentokForm;\n","import React from 'react';\n\nclass NavBar extends React.Component {\n  constructor(props) {\n    super();\n  }\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\">\n        <a className=\"navbar-brand\" href=\"/\">{this.props.title}</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"/\">Go To Home</a>\n            </li>\n          </ul>\n          <span className=\"navbar-text d-inline-flex\">\n            <p className=\"lead mb-0\">\n              Project ID:&nbsp;\n              <span className=\"font-weight-bold\">{this.props.projectId}</span>\n            </p>\n            {this.props.type === 'session' &&\n              <p className=\"lead mb-0\">\n                &nbsp; Session ID: &nbsp;\n                <span className=\"font-weight-bold\">{this.props.sessionId}</span>\n              </p>\n            }\n          </span>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import jwt from 'jsonwebtoken';\n\nexport const INSIGHTS_URL = 'https://insights.opentok.com'\n\nexport const getToken = (apiKey, apiSecret) => {\n  const currentTime = Math.floor(new Date() / 1000);\n  return jwt.sign({\n    iss: apiKey,\n    ist: 'project',\n    iat: currentTime,\n    exp: currentTime + (60 * 60) // 1 hour\n  }, apiSecret);\n}\n","import React, { Component } from 'react';\n\nclass ChartContainer extends Component {\n  render() {\n    return (\n      <div className=\"card m-3 scroll-element\" id={ this.props.scrollId }>\n        <div className=\"card-header font-weight-bold\">\n          <i className={`fas fa-chart-${this.props.titleIcon}`}></i> {\n            this.props.title\n          }\n        </div>\n        <div className=\"card-body w-95\">\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ChartContainer;\n","import React, { Component } from 'react';\nimport '../css/loading.css';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"lds-default\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n    );\n  }\n}\n\nexport default Loading;\n","import React, { Component } from 'react';\n\nclass ErrorMessage extends Component {\n  render() {\n    return (\n      <div className=\"errorMessage\">\n        Error! {this.props.error}\n      </div>\n    );\n  }\n}\n\nexport default ErrorMessage;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Line } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport moment from 'moment';\nimport Loading from './../../components/Loading';\nimport ErrorMessage from './../../components/ErrorMessage';\n\nclass UsageByDay extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n          projectData(\n            start: ${moment().subtract(30, 'days')},\n            interval: DAILY\n          ) {\n            resources {\n              intervalStart,\n              intervalEnd,\n              usage {\n                streamedPublishedMinutes,\n                streamedSubscribedMinutes,\n                individualArchiveMinutes,\n                sdBroadcastComposedMinutes,\n                sipUserMinutes\n              }\n            }\n          }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.projectData.resources', []);\n          return (\n            <Line data={{\n              labels: resources.map(item => moment(item.intervalStart).format('MMM DD')),\n              datasets: [\n                {\n                  label: 'Streamed Published Minutes',\n                  backgroundColor: 'rgba(75,192,192,0.4)',\n                  data: resources.map(item => get(item, 'usage.streamedPublishedMinutes', 0)),\n                },\n                {\n                  label: 'Streamed Subscribed Minutes',\n                  backgroundColor: 'rgba(75,75,192,0.4)',\n                  data: resources.map(item => get(item, 'usage.streamedSubscribedMinutes', 0)),\n                },\n                {\n                  label: 'Individual Archive Minutes',\n                  backgroundColor: '#99004C',\n                  data: resources.map(item => get(item, 'usage.individualArchiveMinutes', 0)),\n                },\n                {\n                  label: 'Broadcast Composed Minutes',\n                  backgroundColor: '#CC6600',\n                  data: resources.map(item => get(item, 'usage.sdBroadcastComposedMinutes', 0)),\n                },\n                {\n                  label: 'SIP User Minutes',\n                  backgroundColor: '#3333FF',\n                  data: resources.map(item => get(item, 'usage.sipUserMinutes', 0)),\n                },\n              ],\n            }} />\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default UsageByDay;\n","const round = (value, decimals) =>\n  Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n\nexport default round;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Chart } from \"react-google-charts\";\nimport { get } from 'lodash';\nimport moment from 'moment';\nimport round from './helpers/round';\nimport Loading from './../../components/Loading';\nimport ErrorMessage from './../../components/ErrorMessage';\n\nclass UsageByLocation extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n          projectData(\n            start: ${moment().subtract(30, 'days')},\n            interval: DAILY,\n            groupBy: COUNTRY\n          ) {\n            resources {\n              country\n              usage {\n                streamedSubscribedMinutes\n              }\n            }\n          }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(resources){\n    let distinctCountries = resources.filter(x => x.country != null);\n    var allCountryData = [];\n    var countryData = {};\n    distinctCountries.forEach(item => {\n      countryData[item.country] = countryData[item.country] || 0;\n      var subscribedMinutes = item.usage == null ? 0 : item.usage.streamedSubscribedMinutes;\n      countryData[item.country] = round((countryData[item.country] + subscribedMinutes), 4);\n    });\n    // Compiling null data\n    var otherCountriesData = resources.filter(x => x.country == null);\n    var otherData = otherCountriesData.map(item => get(item, 'usage.streamedSubscribedMinutes', 0));\n    let numOr0 = n => isNaN(n) ? 0 : n;\n    var otherValues = otherData.reduce((a, b) => numOr0(a) + numOr0(b))\n    if (otherValues > 0){\n      countryData['Others'] = otherValues\n    }\n    allCountryData = Object.entries(countryData);\n    return allCountryData;\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.projectData.resources', []);\n          const labels = ['Country', 'Subscribed Usage(Mins)'];\n          var countryData = [labels];\n          var subscribedCountryData = this.getSubscribedData(resources);\n          countryData = countryData.concat(subscribedCountryData);\n          return (\n            <Chart\n              chartType=\"GeoChart\"\n              data={countryData}\n              width=\"100%\"\n              height=\"400px\"\n              legendToggle\n            />\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default UsageByLocation;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Pie } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport moment from 'moment';\nimport round from './helpers/round';\nimport Loading from './../../components/Loading';\nimport ErrorMessage from './../../components/ErrorMessage';\n\nclass UsageByBrowser extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n          projectData(\n            start: ${moment().subtract(30, 'days')},\n            interval: DAILY,\n            groupBy: BROWSER\n          ) {\n            resources {\n              browser\n              usage {\n                streamedSubscribedMinutes\n              }\n            }\n          }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(resources){\n    let distinctBrowsers = resources.filter(x => x.browser != null);\n    var browserData = {};\n    distinctBrowsers.forEach(item => {\n      browserData[item.browser] = browserData[item.browser] || 0;\n      var subscribedMinutes = item.usage == null ? 0 : item.usage.streamedSubscribedMinutes;\n      browserData[item.browser] = round((browserData[item.browser] + subscribedMinutes), 2);\n    });\n    // Compiling null data\n    var otherBrowsersData = resources.filter(x => x.browser == null);;\n    var otherData = otherBrowsersData.map(item => get(item, 'usage.streamedSubscribedMinutes', 0));\n    let numOr0 = n => isNaN(n) ? 0 : n;\n    var otherValues = otherData.reduce((a, b) => numOr0(a) + numOr0(b), 0)\n    if (otherValues > 0){\n      browserData['Others'] = otherValues\n    }\n\n    return {\n      labels: Object.keys(browserData),\n      browserData: Object.values(browserData)\n    }\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.projectData.resources', []);\n          const {labels, browserData} = this.getSubscribedData(resources);\n          return (\n            <Pie data={{\n              labels: labels,\n              datasets: [{\n                data: browserData,\n                backgroundColor: [\n                  '#e6194b',\n                  '#3cb44b',\n                  '#ffe119',\n                  '#4363d8',\n                  '#f58231',\n                  '#911eb4',\n                  '#46f0f0',\n                  '#f032e6',\n                  '#bcf60c',\n                  '#fabebe',\n                  '#008080',\n                  '#e6beff',\n                  '#9a6324',\n                  '#fffac8',\n                  '#800000',\n                  '#aaffc3',\n                  '#808000',\n                  '#ffd8b1',\n                  '#000075',\n                  '#808080'\n                ],\n              }],\n            }} />\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default UsageByBrowser;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Pie } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport moment from 'moment';\nimport round from './helpers/round';\nimport Loading from './../../components/Loading';\nimport ErrorMessage from './../../components/ErrorMessage';\n\nclass UsageByBrowserVersion extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n          projectData(\n            start: ${moment().subtract(30, 'days')},\n            interval: DAILY,\n            groupBy: BROWSER_VERSION\n          ) {\n            resources {\n              browserVersion\n              browser\n              usage {\n                streamedSubscribedMinutes\n              }\n            }\n          }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(resources){\n    let distinctBrowsers = resources.filter(x => x.browserVersion != null);\n    var browserData = {};\n    distinctBrowsers.forEach(item => {\n      var propName = item.browser + item.browserVersion;\n      browserData[propName] = browserData[propName] || 0;\n      var subscribedMinutes = item.usage == null ? 0 : item.usage.streamedSubscribedMinutes;\n      browserData[propName] = round((browserData[propName] + subscribedMinutes), 2);\n    });\n    // Compiling null data\n    var otherBrowsersData = resources.filter(x => x.browserVersion == null);;\n    var otherData = otherBrowsersData.map(item => get(item, 'usage.streamedSubscribedMinutes', 0));\n    let numOr0 = n => isNaN(n) ? 0 : n;\n    var otherValues = otherData.reduce((a, b) => numOr0(a) + numOr0(b), 0)\n    if (otherValues > 0){\n      browserData['Others'] = otherValues\n    }\n\n    return {\n      labels: Object.keys(browserData),\n      browserData: Object.values(browserData)\n    }\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.projectData.resources', []);\n          const {labels, browserData} = this.getSubscribedData(resources);\n          return (\n            <Pie data={{\n              labels: labels,\n              datasets: [{\n                data: browserData,\n                backgroundColor: [\n                  '#e6194b',\n                  '#3cb44b',\n                  '#ffe119',\n                  '#4363d8',\n                  '#f58231',\n                  '#911eb4',\n                  '#46f0f0',\n                  '#f032e6',\n                  '#bcf60c',\n                  '#fabebe',\n                  '#008080',\n                  '#e6beff',\n                  '#9a6324',\n                  '#fffac8',\n                  '#800000',\n                  '#aaffc3',\n                  '#808000',\n                  '#ffd8b1',\n                  '#000075',\n                  '#808080'\n                ],\n              }],\n            }} />\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default UsageByBrowserVersion;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Pie } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport moment from 'moment';\nimport round from './helpers/round';\nimport Loading from './../../components/Loading';\nimport ErrorMessage from './../../components/ErrorMessage';\n\nclass UsageBySdkVersion extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n          projectData(\n            start: ${moment().subtract(30, 'days')},\n            groupBy: SDK_VERSION\n          ) {\n            resources {\n              sdkType,\n              usage {\n                streamedSubscribedMinutes\n              }\n            }\n          }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(resources){\n    let distinctData = resources.filter(x => x.sdkVersion != null);\n    var subscribedData = {};\n    distinctData.forEach(item => {\n      subscribedData[item.sdkVersion] = subscribedData[item.sdkVersion] || 0;\n      subscribedData[item.sdkVersion] = round((subscribedData[item.sdkVersion] + item.usage.streamedSubscribedMinutes), 2);\n    });\n    // Compiling null data\n    var otherSubscribedData = resources.filter(x => x.sdkVersion == null);;\n    var otherData = otherSubscribedData.map(item => get(item, 'usage.streamedSubscribedMinutes', 0));\n    let numOr0 = n => isNaN(n) ? 0 : n;\n    var otherValues = otherData.reduce((a, b) => numOr0(a) + numOr0(b), 0)\n    if (otherValues > 0){\n      subscribedData['Unknown'] = otherValues\n    }\n\n    return {\n      labels: Object.keys(subscribedData),\n      subscribedData: Object.values(subscribedData)\n    }\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.projectData.resources', []);\n          const {labels, subscribedData} = this.getSubscribedData(resources);\n          return (\n            <Pie data={{\n              labels: labels,\n              datasets: [{\n                label: 'SDK Versions',\n                backgroundColor: [\n                  '#e6194b',\n                  '#3cb44b',\n                  '#ffe119',\n                  '#4363d8',\n                  '#f58231',\n                  '#911eb4',\n                  '#46f0f0',\n                  '#f032e6',\n                  '#bcf60c',\n                  '#fabebe',\n                  '#008080',\n                  '#e6beff',\n                  '#9a6324',\n                  '#fffac8',\n                  '#800000',\n                  '#aaffc3',\n                  '#808000',\n                  '#ffd8b1',\n                  '#000075',\n                  '#808080'\n                ],\n                data: subscribedData,\n              }],\n            }} />\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default UsageBySdkVersion;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Pie } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport moment from 'moment';\nimport round from './helpers/round';\nimport Loading from './../../components/Loading';\nimport ErrorMessage from './../../components/ErrorMessage';\n\nclass UsageBySdkDistribution extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n          projectData(\n            start: ${moment().subtract(30, 'days')},\n            groupBy: SDK_TYPE,\n            sdkType: [JS, ANDROID, IOS, WINDOWS, OTHER]\n          ) {\n            resources {\n              sdkType,\n              usage {\n                streamedSubscribedMinutes\n              }\n            }\n          }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(resources){\n    let distinctData = resources.filter(x => x.sdkType != null);\n    var subscribedData = {};\n    distinctData.forEach(item => {\n      subscribedData[item.sdkType] = subscribedData[item.sdkType] || 0;\n      subscribedData[item.sdkType] = round((subscribedData[item.sdkType] + item.usage.streamedSubscribedMinutes), 2);\n    });\n    // Compiling null data\n    var otherSubscribedData = resources.filter(x => x.sdkType == null);;\n    var otherData = otherSubscribedData.map(item => get(item, 'usage.streamedSubscribedMinutes', 0));\n    let numOr0 = n => isNaN(n) ? 0 : n;\n    var otherValues = otherData.reduce((a, b) => numOr0(a) + numOr0(b), 0)\n    if (otherValues > 0){\n      subscribedData['Unknown'] = otherValues\n    }\n\n    return {\n      labels: Object.keys(subscribedData),\n      subscribedData: Object.values(subscribedData)\n    }\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.projectData.resources', []);\n          const {labels, subscribedData} = this.getSubscribedData(resources);\n          return (\n            <Pie data={{\n              labels: labels,\n              datasets: [{\n                label: 'SDK Distributions',\n                backgroundColor: [\n                  '#e6194b',\n                  '#3cb44b',\n                  '#ffe119',\n                  '#4363d8',\n                  '#f58231',\n                  '#911eb4',\n                  '#46f0f0',\n                  '#f032e6',\n                  '#bcf60c',\n                  '#fabebe',\n                  '#008080',\n                  '#e6beff',\n                  '#9a6324',\n                  '#fffac8',\n                  '#800000',\n                  '#aaffc3',\n                  '#808000',\n                  '#ffd8b1',\n                  '#000075',\n                  '#808080'\n                ],\n                data: subscribedData,\n              }],\n            }} />\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default UsageBySdkDistribution;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { HorizontalBar } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport moment from 'moment';\nimport Loading from './../../components/Loading';\nimport ErrorMessage from './../../components/ErrorMessage';\n\nclass LatencyByCountry extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n          projectData(\n            start: ${moment().subtract(30, 'days')},\n            groupBy: COUNTRY\n          ) {\n            resources {\n              country,\n              quality {\n                subscriber {\n                  latencyMsAvg\n                }\n              }\n            }\n          }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.projectData.resources', []);\n          return (\n            <HorizontalBar data={{\n              labels: resources.map(item => item.country),\n              datasets: [{\n                label: 'Avg. latency',\n                backgroundColor: '#36A2EB',\n                data: resources.map(item => get(item, 'quality.subscriber.latencyMsAvg', 0)),\n              }],\n            }} />\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default LatencyByCountry;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Bar } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport moment from 'moment';\nimport Loading from './../../components/Loading';\nimport ErrorMessage from './../../components/ErrorMessage';\n\nclass FailuresBySdkType extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n          projectData(\n            start: ${moment().subtract(30, 'days')},\n            groupBy: SDK_TYPE,\n            sdkType: [JS, ANDROID, IOS, WINDOWS, OTHER]\n          ) {\n            resources {\n              sdkType,\n              errors {\n                connect {\n                  failures\n                },\n                publish {\n                  failures\n                },\n                subscribe {\n                  failures\n                }\n              }\n            }\n          }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.projectData.resources', []);\n          return (\n            <Bar data={{\n              labels: resources.map(item => item.browser),\n              datasets: [\n                {\n                  label: 'Connect Failures',\n                  backgroundColor: '#FF6384',\n                  data: resources.map(item => get(item, 'errors.connect.failures', 0)),\n                },\n                {\n                  label: 'Publish Failures',\n                  backgroundColor: '#E89033',\n                  data: resources.map(item => get(item, 'errors.publish.failures', 0)),\n                },\n                {\n                  label: 'Subscribe Failures',\n                  backgroundColor: '#FFCE56',\n                  data: resources.map(item => get(item, 'errors.subscribe.failures', 0)),\n                },\n              ],\n            }} />\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default FailuresBySdkType;\n","import React from 'react';\n\nclass ProjectSideBar extends React.Component {\n  constructor(props) {\n    super();\n  }\n\n  render() {\n    return (\n      <nav id=\"navbar-example3\" className=\"navbar navbar-light bg-light position-fixed h-100\">\n        <nav className=\"nav nav-pills flex-column\">\n          <a className=\"nav-link font-weight-bold\" href=\"#usage\">Usage</a>\n          <nav className=\"nav nav-pills flex-column\">\n            <a className=\"nav-link ml-3 my-1\" href=\"#usage-by-day\">By Day</a>\n            <a className=\"nav-link ml-3 my-1\" href=\"#usage-by-location\">By Location</a>\n            <a className=\"nav-link ml-3 my-1\" href=\"#usage-by-browser\">By Browser</a>\n            <a className=\"nav-link ml-3 my-1\" href=\"#usage-by-browser-version\">By Browser Version</a>\n            <a className=\"nav-link ml-3 my-1\" href=\"#usage-by-sdk-version\">By SDK Version</a>\n            <a className=\"nav-link ml-3 my-1\" href=\"#usage-by-sdk-distribution\">By SDK Distribution</a>\n          </nav>\n          <a className=\"nav-link font-weight-bold\" href=\"#quality-and-failures\">Quality and Failures</a>\n          <nav className=\"nav nav-pills flex-column\">\n            <a className=\"nav-link ml-3 my-1\" href=\"#failures-by-browser\">Failures by browser</a>\n            <a className=\"nav-link ml-3 my-1\" href=\"#failures-by-sdktype\">Failures by SDK Type</a>\n          </nav>\n          <a className=\"nav-link font-weight-bold\" href=\"#speed\">Speed</a>\n          <nav className=\"nav nav-pills flex-column\">\n            <a className=\"nav-link ml-3 my-1\" href=\"#latency-by-country\">Latency By Country</a>\n            <a className=\"nav-link ml-3 my-1\" href=\"#bitrate-by-country\">Bitrate by Country</a>\n          </nav>\n        </nav>\n      </nav>\n    );\n  }\n}\n\nexport default ProjectSideBar;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Bar } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport moment from 'moment';\nimport Loading from './../../components/Loading';\nimport ErrorMessage from './../../components/ErrorMessage';\n\nclass FailuresByBrowser extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n          projectData(\n            start: ${moment().subtract(30, 'days')},\n            groupBy: BROWSER,\n            browser: [CHROME, FIREFOX, IE, EDGE, SAFARI]\n          ) {\n            resources {\n              browser,\n              errors {\n                connect {\n                  failures\n                },\n                publish {\n                  failures\n                },\n                subscribe {\n                  failures\n                }\n              }\n            }\n          }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.projectData.resources', []);\n          return (\n            <Bar data={{\n              labels: resources.map(item => item.browser),\n              datasets: [\n                {\n                  label: 'Connect Failures',\n                  backgroundColor: '#FF6384',\n                  data: resources.map(item => get(item, 'errors.connect.failures', 0)),\n                },\n                {\n                  label: 'Publish Failures',\n                  backgroundColor: '#E89033',\n                  data: resources.map(item => get(item, 'errors.publish.failures', 0)),\n                },\n                {\n                  label: 'Subscribe Failures',\n                  backgroundColor: '#FFCE56',\n                  data: resources.map(item => get(item, 'errors.subscribe.failures', 0)),\n                },\n              ],\n            }} />\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default FailuresByBrowser;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { HorizontalBar } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport moment from 'moment';\nimport Loading from './../../components/Loading';\nimport ErrorMessage from './../../components/ErrorMessage';\n\nclass BitrateByCountry extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n          projectData(\n            start: ${moment().subtract(30, 'days')},\n            groupBy: COUNTRY\n          ) {\n            resources {\n              country,\n              quality {\n                subscriber {\n                  videoBitrateKbpsAvg\n                }\n              }\n            }\n          }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.projectData.resources', []);\n          return (\n            <HorizontalBar data={{\n              labels: resources.map(item => item.country),\n              datasets: [{\n                label: 'Avg. Bitrate',\n                backgroundColor: '#36A2EB',\n                data: resources.map(item => get(item, 'quality.subscriber.videoBitrateKbpsAvg', 0)),\n              }],\n            }} />\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default BitrateByCountry;\n","import React from 'react';\nimport NavBar from './NavBar';\nimport { getToken, INSIGHTS_URL } from  './../util';\nimport urlJoin from 'url-join';\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloProvider } from 'react-apollo';\nimport ChartContainer from './../components/ChartContainer';\nimport UsageByDay from './../components/charts/UsageByDay';\nimport UsageByLocation from './../components/charts/UsageByLocation';\nimport UsageByBrowser from './../components/charts/UsageByBrowser';\nimport UsageByBrowserVersion from './../components/charts/UsageByBrowserVersion';\nimport UsageBySdkVersion from './../components/charts/UsageBySdkVersion';\nimport UsageBySdkDistribution from './../components/charts/UsageBySdkDistribution';\nimport LatencyByCountry from './../components/charts/LatencyByCountry';\nimport FailuresBySdkType from './../components/charts/FailuresBySdkType';\nimport ProjectSideBar from './ProjectSideBar';\nimport FailuresByBrowser from './charts/FailuresByBrowser';\nimport BitrateByCountry from './charts/BitrateByCountry';\n\nclass ProjectReport extends React.Component {\n  constructor(props) {\n    super(props);\n    const getProject = JSON.parse(localStorage.getItem('project'));\n    // TODO: Redirect to home page when localstorage is deleted.\n    // if (!getProject) {\n    //   this.props.history.push('/');\n    // }\n    const {project_id, project_secret, query_type, session_id} = getProject;\n    this.state = {\n      projectId: project_id,\n      projectSecret: project_secret,\n      queryType: query_type,\n      sessionId: session_id,\n      client: ''\n    }\n  }\n\n  componentDidMount(){\n    const { projectId, projectSecret } = this.state;\n    const token = getToken(projectId, projectSecret);\n    const client = new ApolloClient({\n      link: new HttpLink({\n        uri: urlJoin(INSIGHTS_URL, '/graphql'),\n        headers: { 'X-OPENTOK-AUTH': token },\n      }),\n      cache: new InMemoryCache(),\n    });\n    this.setState({ client })\n  }\n\n  render() {\n    const { client, projectId } = this.state;\n    if(client === ''){\n      return null;\n    }\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"container-fluid p-0\">\n          <NavBar title=\"Project Dashboard\" type=\"project\" projectId={projectId}/>\n          <div className=\"row my-5 mx-0 header-spacer\">\n            <div className=\"col-2 p-0\">\n              <ProjectSideBar type=\"project\" typeId={projectId}/>\n            </div>\n            <div className=\"col pr-0\">\n              <div data-spy=\"scroll\" data-target=\"#navbar-example3\" data-offset=\"0\">\n                <div id=\"usage\">\n                  <ChartContainer titleIcon=\"area\" title=\"Usage by Day\" scrollId=\"usage-by-day\">\n                    <UsageByDay projectId={projectId}/>\n                  </ChartContainer>\n\n                  <ChartContainer titleIcon=\"area\" title=\"Usage by Location\" scrollId=\"usage-by-location\">\n                    <UsageByLocation projectId={projectId}/>\n                  </ChartContainer>\n\n                  <ChartContainer titleIcon=\"area\" title=\"Usage by Browser\" scrollId=\"usage-by-browser\">\n                    <UsageByBrowser projectId={projectId}/>\n                  </ChartContainer>\n\n                  <ChartContainer titleIcon=\"area\" title=\"Usage by Browser Version\" scrollId=\"usage-by-browser-version\">\n                    <UsageByBrowserVersion projectId={projectId}/>\n                  </ChartContainer>\n\n                  <ChartContainer titleIcon=\"area\" title=\"Usage by SDK Version\" scrollId=\"usage-by-sdk-version\">\n                    <UsageBySdkVersion projectId={projectId}/>\n                  </ChartContainer>\n\n                  <ChartContainer titleIcon=\"area\" title=\"Usage by SDK Distribution\" scrollId=\"usage-by-sdk-distribution\">\n                    <UsageBySdkDistribution projectId={projectId}/>\n                  </ChartContainer>\n                </div>\n                <div id=\"quality-and-failures\">\n                  <ChartContainer titleIcon=\"area\" title=\"Failures by SDK Type\" scrollId=\"failures-by-sdktype\">\n                    <FailuresBySdkType projectId={projectId}/>\n                  </ChartContainer>\n                  <ChartContainer titleIcon=\"area\" title=\"Failures by Browser\" scrollId=\"failures-by-browser\">\n                    <FailuresByBrowser projectId={projectId}/>\n                  </ChartContainer>\n                </div>\n                <div id=\"speed\">\n                  <ChartContainer titleIcon=\"area\" title=\"Latency By Country\" scrollId=\"latency-by-country\">\n                    <LatencyByCountry projectId={projectId}/>\n                  </ChartContainer>\n                  <ChartContainer titleIcon=\"area\" title=\"Bitrate By Country\" scrollId=\"bitrate-by-country\">\n                    <BitrateByCountry projectId={projectId}/>\n                  </ChartContainer>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default ProjectReport;\n","import React from 'react';\n\nclass SessionSideBar extends React.Component {\n  constructor(props) {\n    super();\n  }\n\n  render() {\n    return (\n      <nav id=\"navbar-example3\" className=\"navbar navbar-light bg-light position-fixed h-100\">\n        <nav className=\"nav nav-pills flex-column\">\n          <a className=\"nav-link font-weight-bold\" href=\"#totalUnits\">Total Units</a>\n          <a className=\"nav-link font-weight-bold\" href=\"#stats\">Statistics</a>\n          <nav className=\"nav nav-pills flex-column\">\n            <a className=\"nav-link ml-3 py-0\" href=\"#stats-by-browser\">By Browser</a>\n            <a className=\"nav-link ml-3 py-0\" href=\"#stats-by-location\">By Location</a>\n            <a className=\"nav-link ml-3 py-0\" href=\"#stats-by-browser-version\">By Browser Version</a>\n            <a className=\"nav-link ml-3 py-0\" href=\"#stats-by-sdk-version\">By SDK Version</a>\n            <a className=\"nav-link ml-3 py-0\" href=\"#stats-by-sdk-distribution\">By SDK Distribution</a>\n          </nav>\n          <a className=\"nav-link font-weight-bold\" href=\"#publisher-stats\">Publisher Details</a>\n          <nav className=\"nav nav-pills flex-column\">\n            <a className=\"nav-link ml-3 py-0\" href=\"#publisher-stats-by-video-bitrate\">Video Bitrate Stats</a>\n            <a className=\"nav-link ml-3 py-0\" href=\"#publisher-stats-by-video-packet-loss\">Video Packet Loss Stats</a>\n            <a className=\"nav-link ml-3 py-0\" href=\"#publisher-stats-by-video-latency\">Video Latency Stats</a>\n            <a className=\"nav-link ml-3 py-0\" href=\"#publisher-stats-by-audio-bitrate\">Audio Bitrate Stats</a>\n            <a className=\"nav-link ml-3 py-0\" href=\"#publisher-stats-by-audio-packet-loss\">Audio Packet Loss Stats</a>\n            <a className=\"nav-link ml-3 py-0\" href=\"#publisher-stats-by-audio-latency\">Audio Latency Stats</a>\n          </nav>\n          <a className=\"nav-link font-weight-bold\" href=\"#subscriber-stats\">Subscriber Details</a>\n          <nav className=\"nav nav-pills flex-column\">\n            <a className=\"nav-link ml-3 py-0\" href=\"#subscriber-stats-by-video-bitrate\">Video Bitrate Stats</a>\n            <a className=\"nav-link ml-3 py-0\" href=\"#subscriber-stats-by-video-packet-loss\">Video Packet Loss Stats</a>\n            <a className=\"nav-link ml-3 py-0\" href=\"#subscriber-stats-by-video-latency\">Video Latency Stats</a>\n            <a className=\"nav-link ml-3 py-0\" href=\"#subscriber-stats-by-audio-bitrate\">Audio Bitrate Stats</a>\n            <a className=\"nav-link ml-3 py-0\" href=\"#subscriber-stats-by-audio-packet-loss\">Audio Packet Loss Stats</a>\n            <a className=\"nav-link ml-3 py-0\" href=\"#subscriber-stats-by-audio-latency\">Audio Latency Stats</a>\n          </nav>\n          <a className=\"nav-link font-weight-bold\" href=\"#connection-details\">Connection Details</a>\n            <a className=\"nav-link ml-3 py-0\" href=\"#connection-stats\">Publishers Count</a>\n          <nav className=\"nav nav-pills flex-column\">\n          </nav>\n        </nav>\n      </nav>\n    );\n  }\n}\n\nexport default SessionSideBar;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { get } from 'lodash';\nimport round from './../charts/helpers/round';\nimport Loading from './../../components/Loading';\nimport ErrorMessage from './../../components/ErrorMessage';\n\nclass StreamStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            totalCount\n            resources {\n              publisherMinutes\n              subscriberMinutes\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          const publisherMinutes = resources.map(item => get(item, 'publisherMinutes', 0))\n          const subscriberMinutes = resources.map(item => get(item, 'subscriberMinutes', 0))\n          return (\n            <div className=\"card-deck m-0\">\n              <div className=\"card\">\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">Total Published Minutes</h5>\n                  <h1>\n                    {(round(publisherMinutes, 2).toString()=== 'NaN' ? 'N/A' :round(publisherMinutes, 2))}\n                  </h1>\n                </div>\n              </div>\n              <div className=\"card\">\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">Total Subscribed Minutes</h5>\n                  <h1>\n                    {(round(subscriberMinutes, 2).toString()=== 'NaN' ? 'N/A' :round(subscriberMinutes, 2))}\n                  </h1>\n                </div>\n              </div>\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default StreamStats;\n","import React, { Component } from 'react';\n\nclass EmptyGraph extends Component {\n  render() {\n    return (\n      <div className=\"EmptyGraph\">\n        Error! Data not provided from source!\n      </div>\n    );\n  }\n}\n\nexport default EmptyGraph;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Line } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../ErrorMessage';\nimport EmptyGraph from '../../EmptyGraph';\n\nclass PublisherVideoBitRateStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  publishers {\n                    totalCount\n                    resources {\n                      stream {\n                        streamId\n                      }\n                      streamStatsCollection {\n                        resources {\n                          videoBitrateKbps\n                          videoResolution\n                          createdAt\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(meetingArray){\n    let meetingWithMostStats = {};\n    let largestStatsCount = 0;\n    meetingArray.forEach(meeting => {\n      let statsCount = 0;\n      const publisherArray = get(meeting, 'publishers.resources', []);\n      publisherArray.forEach(pubResources => {\n        statsCount += get(pubResources, 'streamStatsCollection.resources.length', 0);\n      });\n      if (statsCount > largestStatsCount) {\n        meetingWithMostStats = meeting;\n        largestStatsCount = statsCount;\n      }\n    });\n    var streamChartData = this.convertStreamArrayToChartData(meetingWithMostStats);\n    return streamChartData;\n  }\n\n  convertStreamArrayToChartData = (meeting) => {\n    const colors = ['#66C5CC', '#F6CF71', '#F89C74', '#DCB0F2', '#87C55F',\n      '#9EB9F3', '#FE88B1', '#C9DB74', '#8BE0A4', '#B497E7', '#D3B484', '#B3B3B3'];\n    let colorIndex = 0;\n    const publisherArray = get(meeting, 'publishers.resources', []);\n    const chartData = publisherArray.reduce((acc, streamData) => {\n      const streamStatsArray = get(streamData, 'streamStatsCollection.resources', []);\n      // Discard short publishers\n      if (streamStatsArray.length < 3) {\n        return acc;\n      }\n      const color = colors[colorIndex % colors.length];\n      colorIndex++;\n      const shortStreamId = streamData.stream.streamId.substring(0, 8);\n      const chartData = {\n        borderColor: color,\n        fill: false,\n        label: `Stream ${shortStreamId}...`,\n        data: streamStatsArray.reduce((acc, streamStats) => {\n            // Discard stats anomolously large bitrates\n            if (streamStats.videoBitrateKbps > 1000) {\n              return acc;\n            }\n            return acc.concat({\n              x: streamStats.createdAt,\n              y: streamStats.videoBitrateKbps,\n            })\n          }, []),\n      };\n\n      return acc.concat(chartData)\n    }, []);\n    return chartData;\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const streamChartData = this.getSubscribedData(meetingResources);\n            graph = <Line\n              data={{\n                datasets: streamChartData\n              }}\n              options={{\n                scales: {\n                  yAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: 'kbps'\n                    }\n                  }],\n                  xAxes: [{\n                    type: 'time',\n                    distribution: 'linear',\n                    time: {\n                      unit: 'minute',\n                      displayFormats: {\n                        minute: 'MMM D, hh:mm:ss'\n                      }\n                    },\n                  }]\n                }}\n              }\n            />\n\n          }else{\n            graph = <EmptyGraph />;\n          }\n\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default PublisherVideoBitRateStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Pie } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport Loading from './../../components/Loading';\nimport ErrorMessage from './../../components/ErrorMessage';\nimport EmptyGraph from '../EmptyGraph';\n\nclass BrowserStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  connections {\n                    totalCount\n                    maxConcurrent\n                    resources {\n                      guid\n                      connectionId\n                      country\n                      region\n                      city\n                      browser\n                      browserVersion\n                      deviceModel\n                      userAgent\n                      sdkType\n                      sdkVersion\n                      createdAt\n                      destroyedAt\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(resources){\n    let distinctData = resources.filter(x => x.browser != null);\n    var chartData = {};\n    distinctData.forEach(function (obj) {\n      var propName = obj.browser;\n      chartData[propName] = chartData[propName] ? chartData[propName] + 1 : 1;\n    });\n    return {\n      labels: Object.keys(chartData),\n      chartData: Object.values(chartData)\n    }\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const connectionResources = meetingResources.map(item => get(item, 'connections.resources', []))[0];\n            const {labels, chartData} = this.getSubscribedData(connectionResources);\n            graph = <Pie data={{\n              labels: labels,\n              datasets: [{\n                data: chartData,\n                backgroundColor: [\n                  '#e6194b',\n                  '#3cb44b',\n                  '#ffe119',\n                  '#4363d8',\n                  '#f58231',\n                  '#911eb4',\n                  '#46f0f0',\n                  '#f032e6',\n                  '#bcf60c',\n                  '#fabebe',\n                  '#008080',\n                  '#e6beff',\n                  '#9a6324',\n                  '#fffac8',\n                  '#800000',\n                  '#aaffc3',\n                  '#808000',\n                  '#ffd8b1',\n                  '#000075',\n                  '#808080'\n                ],\n              }],\n            }} />;\n          }else{\n            graph = <EmptyGraph />;\n          }\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default BrowserStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Pie } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport Loading from './../../components/Loading';\nimport ErrorMessage from './../../components/ErrorMessage';\nimport EmptyGraph from '../EmptyGraph';\n\nclass BrowserVersionStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  connections {\n                    totalCount\n                    maxConcurrent\n                    resources {\n                      browser\n                      browserVersion\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(resources){\n    let distinctData = resources.filter(x => x.browserVersion != null);\n    var chartData = {};\n\n    distinctData.forEach(function (obj) {\n      var propName = obj.browser + obj.browserVersion;\n      chartData[propName] = chartData[propName] ? chartData[propName] + 1 : 1;\n    });\n\n    return {\n      labels: Object.keys(chartData),\n      chartData: Object.values(chartData)\n    }\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const connectionResources = meetingResources.map(item => get(item, 'connections.resources', []))[0];\n            const {labels, chartData} = this.getSubscribedData(connectionResources);\n            graph = <Pie data={{\n              labels: labels,\n              datasets: [{\n                data: chartData,\n                backgroundColor: [\n                  '#e6194b',\n                  '#3cb44b',\n                  '#ffe119',\n                  '#4363d8',\n                  '#f58231',\n                  '#911eb4',\n                  '#46f0f0',\n                  '#f032e6',\n                  '#bcf60c',\n                  '#fabebe',\n                  '#008080',\n                  '#e6beff',\n                  '#9a6324',\n                  '#fffac8',\n                  '#800000',\n                  '#aaffc3',\n                  '#808000',\n                  '#ffd8b1',\n                  '#000075',\n                  '#808080'\n                ],\n              }],\n            }} />\n          }else{\n            graph = <EmptyGraph />;\n          }\n\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default BrowserVersionStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Chart } from \"react-google-charts\";\nimport { get } from 'lodash';\nimport Loading from './../../components/Loading';\nimport ErrorMessage from './../../components/ErrorMessage';\nimport EmptyGraph from '../EmptyGraph';\n\nclass CountryStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  connections {\n                    totalCount\n                    maxConcurrent\n                    resources {\n                      country\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(resources){\n    let distinctData = resources.filter(x => x.country != null);\n    var chartData = {};\n    distinctData.forEach(function (obj) {\n      var propName = obj.country;\n      chartData[propName] = chartData[propName] ? chartData[propName] + 1 : 1;\n    });\n    return Object.entries(chartData)\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const connectionResources = meetingResources.map(item => get(item, 'connections.resources', []))[0];\n            const labels = ['Country', 'No. of Connections'];\n            var countryData = [labels];\n            const chartData = this.getSubscribedData(connectionResources);\n            countryData = countryData.concat(chartData);\n            graph = <Chart\n              chartType=\"GeoChart\"\n              data={countryData}\n              width=\"100%\"\n              height=\"400px\"\n              legendToggle\n            />;\n          }else{\n            graph = <EmptyGraph />;\n          }\n\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default CountryStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Pie } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport Loading from './../../components/Loading';\nimport ErrorMessage from './../../components/ErrorMessage';\nimport EmptyGraph from '../EmptyGraph';\n\nclass SdkTypeStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  connections {\n                    totalCount\n                    maxConcurrent\n                    resources {\n                      sdkType\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(resources){\n    let distinctData = resources.filter(x => x.sdkType != null);\n    var chartData = {};\n    distinctData.forEach(function (obj) {\n      var propName = obj.sdkType;\n      chartData[propName] = chartData[propName] ? chartData[propName] + 1 : 1;\n    });\n    return {\n      labels: Object.keys(chartData),\n      chartData: Object.values(chartData)\n    }\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const connectionResources = meetingResources.map(item => get(item, 'connections.resources', []))[0];\n            const {labels, chartData} = this.getSubscribedData(connectionResources);\n            graph = <Pie data={{\n              labels: labels,\n              datasets: [{\n                data: chartData,\n                backgroundColor: [\n                  '#e6194b',\n                  '#3cb44b',\n                  '#ffe119',\n                  '#4363d8',\n                  '#f58231',\n                  '#911eb4',\n                  '#46f0f0',\n                  '#f032e6',\n                  '#bcf60c',\n                  '#fabebe',\n                  '#008080',\n                  '#e6beff',\n                  '#9a6324',\n                  '#fffac8',\n                  '#800000',\n                  '#aaffc3',\n                  '#808000',\n                  '#ffd8b1',\n                  '#000075',\n                  '#808080'\n                ],\n              }],\n            }} />\n          }else{\n            graph = <EmptyGraph />;\n          }\n\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default SdkTypeStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Pie } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport Loading from './../../components/Loading';\nimport ErrorMessage from './../../components/ErrorMessage';\nimport EmptyGraph from '../EmptyGraph';\n\nclass SdkVersionStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  connections {\n                    totalCount\n                    maxConcurrent\n                    resources {\n                      sdkVersion\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(resources){\n    let distinctData = resources.filter(x => x.sdkVersion != null);\n    var chartData = {};\n    distinctData.forEach(function (obj) {\n      var propName = obj.sdkVersion;\n      chartData[propName] = chartData[propName] ? chartData[propName] + 1 : 1;\n    });\n    return {\n      labels: Object.keys(chartData),\n      chartData: Object.values(chartData)\n    }\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const connectionResources = meetingResources.map(item => get(item, 'connections.resources', []))[0];\n            const {labels, chartData} = this.getSubscribedData(connectionResources);\n            graph = <Pie data={{\n              labels: labels,\n              datasets: [{\n                data: chartData,\n                backgroundColor: [\n                  '#e6194b',\n                  '#3cb44b',\n                  '#ffe119',\n                  '#4363d8',\n                  '#f58231',\n                  '#911eb4',\n                  '#46f0f0',\n                  '#f032e6',\n                  '#bcf60c',\n                  '#fabebe',\n                  '#008080',\n                  '#e6beff',\n                  '#9a6324',\n                  '#fffac8',\n                  '#800000',\n                  '#aaffc3',\n                  '#808000',\n                  '#ffd8b1',\n                  '#000075',\n                  '#808080'\n                ],\n              }],\n            }} />;\n          }else{\n            graph = <EmptyGraph />;\n          }\n\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default SdkVersionStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Line } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../ErrorMessage';\nimport EmptyGraph from '../../EmptyGraph';\n\nclass PublisherVideoPacketLossStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  publishers {\n                    totalCount\n                    resources {\n                      stream {\n                        streamId\n                      }\n                      streamStatsCollection {\n                        resources {\n                          videoPacketLoss\n                          videoResolution\n                          createdAt\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(meetingArray){\n    let meetingWithMostStats = {};\n    let largestStatsCount = 0;\n    meetingArray.forEach(meeting => {\n      let statsCount = 0;\n      const publisherArray = get(meeting, 'publishers.resources', []);\n      publisherArray.forEach(pubResources => {\n        statsCount += get(pubResources, 'streamStatsCollection.resources.length', 0);\n      });\n      if (statsCount > largestStatsCount) {\n        meetingWithMostStats = meeting;\n        largestStatsCount = statsCount;\n      }\n    });\n    var streamChartData = this.convertStreamArrayToChartData(meetingWithMostStats);\n    return streamChartData;\n  }\n\n  convertStreamArrayToChartData = (meeting) => {\n    const colors = ['#66C5CC', '#F6CF71', '#F89C74', '#DCB0F2', '#87C55F',\n      '#9EB9F3', '#FE88B1', '#C9DB74', '#8BE0A4', '#B497E7', '#D3B484', '#B3B3B3'];\n    let colorIndex = 0;\n    const publisherArray = get(meeting, 'publishers.resources', []);\n    const chartData = publisherArray.reduce((acc, streamData) => {\n      const streamStatsArray = get(streamData, 'streamStatsCollection.resources', []);\n      // Discard short publishers\n      if (streamStatsArray.length < 3) {\n        return acc;\n      }\n      const color = colors[colorIndex % colors.length];\n      colorIndex++;\n      const shortStreamId = streamData.stream.streamId.substring(0, 8);\n      const chartData = {\n        borderColor: color,\n        fill: false,\n        label: `Stream ${shortStreamId}...`,\n        data: streamStatsArray.reduce((acc, streamStats) => {\n            // Discard stats anomolously large bitrates\n            if (streamStats.videoPacketLoss > 1000) {\n              return acc;\n            }\n            return acc.concat({\n              x: streamStats.createdAt,\n              y: streamStats.videoPacketLoss,\n            })\n          }, []),\n      };\n      return acc.concat(chartData)\n    }, []);\n    return chartData;\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const streamChartData = this.getSubscribedData(meetingResources);\n            graph = <Line\n              data={{\n                datasets: streamChartData\n              }}\n              options={{\n                scales: {\n                  yAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: '%(Percentage)'\n                    }\n                  }],\n                  xAxes: [{\n                    type: 'time',\n                    distribution: 'linear',\n                    time: {\n                      unit: 'minute',\n                      displayFormats: {\n                        minute: 'MMM D, hh:mm:ss'\n                      }\n                    },\n                  }]\n                }}\n              }\n            />\n          }else{\n            graph = <EmptyGraph />;\n          }\n\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default PublisherVideoPacketLossStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Line } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../ErrorMessage';\nimport EmptyGraph from '../../EmptyGraph';\n\nclass PublisherVideoLatencyStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  publishers {\n                    totalCount\n                    resources {\n                      stream {\n                        streamId\n                      }\n                      streamStatsCollection {\n                        resources {\n                          videoLatencyMs\n                          createdAt\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(meetingArray){\n    let meetingWithMostStats = {};\n    let largestStatsCount = 0;\n    meetingArray.forEach(meeting => {\n      let statsCount = 0;\n      const publisherArray = get(meeting, 'publishers.resources', []);\n      publisherArray.forEach(pubResources => {\n        statsCount += get(pubResources, 'streamStatsCollection.resources.length', 0);\n      });\n      if (statsCount > largestStatsCount) {\n        meetingWithMostStats = meeting;\n        largestStatsCount = statsCount;\n      }\n    });\n    var streamChartData = this.convertStreamArrayToChartData(meetingWithMostStats);\n    return streamChartData;\n  }\n\n  convertStreamArrayToChartData = (meeting) => {\n    const colors = ['#66C5CC', '#F6CF71', '#F89C74', '#DCB0F2', '#87C55F',\n      '#9EB9F3', '#FE88B1', '#C9DB74', '#8BE0A4', '#B497E7', '#D3B484', '#B3B3B3'];\n    let colorIndex = 0;\n    const publisherArray = get(meeting, 'publishers.resources', []);\n    const chartData = publisherArray.reduce((acc, streamData) => {\n      const streamStatsArray = get(streamData, 'streamStatsCollection.resources', []);\n      // Discard short publishers\n      if (streamStatsArray.length < 3) {\n        return acc;\n      }\n      const color = colors[colorIndex % colors.length];\n      colorIndex++;\n      const shortStreamId = streamData.stream.streamId.substring(0, 8);\n      const chartData = {\n        borderColor: color,\n        fill: false,\n        label: `Stream ${shortStreamId}...`,\n        data: streamStatsArray.reduce((acc, streamStats) => {\n            // Discard stats anomolously large bitrates\n            if (streamStats.videoLatencyMs > 1000) {\n              return acc;\n            }\n            return acc.concat({\n              x: streamStats.createdAt,\n              y: streamStats.videoLatencyMs,\n            })\n          }, []),\n      };\n      return acc.concat(chartData)\n    }, []);\n    return chartData;\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const streamChartData = this.getSubscribedData(meetingResources);\n            graph = <Line\n              data={{\n                datasets: streamChartData\n              }}\n              options={{\n                scales: {\n                  yAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: 'milliseconds'\n                    }\n                  }],\n                  xAxes: [{\n                    type: 'time',\n                    distribution: 'linear',\n                    time: {\n                      unit: 'minute',\n                      displayFormats: {\n                        minute: 'MMM D, hh:mm:ss'\n                      }\n                    },\n                  }]\n                }}\n              }\n            />\n          }else{\n            graph = <EmptyGraph />;\n          }\n\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default PublisherVideoLatencyStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Line } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../ErrorMessage';\nimport EmptyGraph from '../../EmptyGraph';\n\nclass SubscriberVideoBitRateStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  subscribers {\n                    totalCount\n                    resources {\n                      stream {\n                        streamId\n                      }\n                      streamStatsCollection {\n                        resources {\n                          videoBitrateKbps\n                          createdAt\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(meetingArray){\n    let meetingWithMostStats = {};\n    let largestStatsCount = 0;\n    meetingArray.forEach(meeting => {\n      let statsCount = 0;\n      const subscriberArray = get(meeting, 'subscribers.resources', []);\n      subscriberArray.forEach(subResources => {\n        statsCount += get(subResources, 'streamStatsCollection.resources.length', 0);\n      });\n      if (statsCount > largestStatsCount) {\n        meetingWithMostStats = meeting;\n        largestStatsCount = statsCount;\n      }\n    });\n    var streamChartData = this.convertStreamArrayToChartData(meetingWithMostStats);\n    return streamChartData;\n  }\n\n  convertStreamArrayToChartData = (meeting) => {\n    const colors = ['#66C5CC', '#F6CF71', '#F89C74', '#DCB0F2', '#87C55F',\n      '#9EB9F3', '#FE88B1', '#C9DB74', '#8BE0A4', '#B497E7', '#D3B484', '#B3B3B3'];\n    let colorIndex = 0;\n    const subscriberArray = get(meeting, 'subscribers.resources', []);\n    const chartData = subscriberArray.reduce((acc, streamData) => {\n      const streamStatsArray = get(streamData, 'streamStatsCollection.resources', []);\n      // Discard short subscribers\n      if (streamStatsArray.length < 3) {\n        return acc;\n      }\n      const color = colors[colorIndex % colors.length];\n      colorIndex++;\n      const shortStreamId = streamData.stream.streamId.substring(0, 8);\n      const chartData = {\n        borderColor: color,\n        fill: false,\n        label: `Stream ${shortStreamId}...`,\n        data: streamStatsArray.reduce((acc, streamStats) => {\n            // Discard stats anomolously large bitrates\n            if (streamStats.videoBitrateKbps > 1000) {\n              return acc;\n            }\n            return acc.concat({\n              x: streamStats.createdAt,\n              y: streamStats.videoBitrateKbps,\n            })\n          }, []),\n      };\n\n      return acc.concat(chartData)\n    }, []);\n    return chartData;\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const streamChartData = this.getSubscribedData(meetingResources);\n            graph = <Line\n              data={{\n                datasets: streamChartData\n              }}\n              options={{\n                scales: {\n                  yAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: 'kbps'\n                    }\n                  }],\n                  xAxes: [{\n                    type: 'time',\n                    distribution: 'linear',\n                    time: {\n                      unit: 'minute',\n                      displayFormats: {\n                        minute: 'MMM D, hh:mm:ss'\n                      }\n                    },\n                  }]\n                }}\n              }\n            />\n          }else{\n            graph = <EmptyGraph />;\n          }\n\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default SubscriberVideoBitRateStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Line } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../ErrorMessage';\nimport EmptyGraph from '../../EmptyGraph';\n\nclass SubscriberVideoPacketLossStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  subscribers {\n                    totalCount\n                    resources {\n                      stream {\n                        streamId\n                      }\n                      streamStatsCollection {\n                        resources {\n                          videoPacketLoss\n                          createdAt\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(meetingArray){\n    let meetingWithMostStats = {};\n    let largestStatsCount = 0;\n    meetingArray.forEach(meeting => {\n      let statsCount = 0;\n      const subscriberArray = get(meeting, 'subscribers.resources', []);\n      subscriberArray.forEach(subResources => {\n        statsCount += get(subResources, 'streamStatsCollection.resources.length', 0);\n      });\n      if (statsCount > largestStatsCount) {\n        meetingWithMostStats = meeting;\n        largestStatsCount = statsCount;\n      }\n    });\n    var streamChartData = this.convertStreamArrayToChartData(meetingWithMostStats);\n    return streamChartData;\n  }\n\n  convertStreamArrayToChartData = (meeting) => {\n    const colors = ['#66C5CC', '#F6CF71', '#F89C74', '#DCB0F2', '#87C55F',\n      '#9EB9F3', '#FE88B1', '#C9DB74', '#8BE0A4', '#B497E7', '#D3B484', '#B3B3B3'];\n    let colorIndex = 0;\n    const subscriberArray = get(meeting, 'subscribers.resources', []);\n    const chartData = subscriberArray.reduce((acc, streamData) => {\n      const streamStatsArray = get(streamData, 'streamStatsCollection.resources', []);\n      // Discard short subscribers\n      if (streamStatsArray.length < 3) {\n        return acc;\n      }\n      const color = colors[colorIndex % colors.length];\n      colorIndex++;\n      const shortStreamId = streamData.stream.streamId.substring(0, 8);\n      const chartData = {\n        borderColor: color,\n        fill: false,\n        label: `Stream ${shortStreamId}...`,\n        data: streamStatsArray.reduce((acc, streamStats) => {\n            // Discard stats anomolously large bitrates\n            if (streamStats.videoPacketLoss > 1000) {\n              return acc;\n            }\n            return acc.concat({\n              x: streamStats.createdAt,\n              y: streamStats.videoPacketLoss,\n            })\n          }, []),\n      };\n      return acc.concat(chartData)\n    }, []);\n    return chartData;\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const streamChartData = this.getSubscribedData(meetingResources);\n            graph = <Line\n              data={{\n                datasets: streamChartData\n              }}\n              options={{\n                scales: {\n                  yAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: '%(Percentage)'\n                    }\n                  }],\n                  xAxes: [{\n                    type: 'time',\n                    distribution: 'linear',\n                    time: {\n                      unit: 'minute',\n                      displayFormats: {\n                        minute: 'MMM D, hh:mm:ss'\n                      }\n                    },\n                  }]\n                }}\n              }\n            />\n          }else{\n            graph = <EmptyGraph />;\n          }\n\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default SubscriberVideoPacketLossStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Line } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../ErrorMessage';\nimport EmptyGraph from '../../EmptyGraph';\n\nclass SubscriberVideoLatencyStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  subscribers {\n                    totalCount\n                    resources {\n                      stream {\n                        streamId\n                      }\n                      streamStatsCollection {\n                        resources {\n                          videoLatencyMs\n                          createdAt\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(meetingArray){\n    let meetingWithMostStats = {};\n    let largestStatsCount = 0;\n    meetingArray.forEach(meeting => {\n      let statsCount = 0;\n      const subscriberArray = get(meeting, 'subscribers.resources', []);\n      subscriberArray.forEach(subResources => {\n        statsCount += get(subResources, 'streamStatsCollection.resources.length', 0);\n      });\n      if (statsCount > largestStatsCount) {\n        meetingWithMostStats = meeting;\n        largestStatsCount = statsCount;\n      }\n    });\n    var streamChartData = this.convertStreamArrayToChartData(meetingWithMostStats);\n    return streamChartData;\n  }\n\n  convertStreamArrayToChartData = (meeting) => {\n    const colors = ['#66C5CC', '#F6CF71', '#F89C74', '#DCB0F2', '#87C55F',\n      '#9EB9F3', '#FE88B1', '#C9DB74', '#8BE0A4', '#B497E7', '#D3B484', '#B3B3B3'];\n    let colorIndex = 0;\n    const subscriberArray = get(meeting, 'subscribers.resources', []);\n    const chartData = subscriberArray.reduce((acc, streamData) => {\n      const streamStatsArray = get(streamData, 'streamStatsCollection.resources', []);\n      // Discard short subscribers\n      if (streamStatsArray.length < 3) {\n        return acc;\n      }\n      const color = colors[colorIndex % colors.length];\n      colorIndex++;\n      const shortStreamId = streamData.stream.streamId.substring(0, 8);\n      const chartData = {\n        borderColor: color,\n        fill: false,\n        label: `Stream ${shortStreamId}...`,\n        data: streamStatsArray.reduce((acc, streamStats) => {\n            // Discard stats anomolously large bitrates\n            if (streamStats.videoLatencyMs > 1000) {\n              return acc;\n            }\n            return acc.concat({\n              x: streamStats.createdAt,\n              y: streamStats.videoLatencyMs,\n            })\n          }, []),\n      };\n      return acc.concat(chartData)\n    }, []);\n    return chartData;\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const streamChartData = this.getSubscribedData(meetingResources);\n            graph = <Line\n              data={{\n                datasets: streamChartData\n              }}\n              options={{\n                scales: {\n                  yAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: 'milliseconds'\n                    }\n                  }],\n                  xAxes: [{\n                    type: 'time',\n                    distribution: 'linear',\n                    time: {\n                      unit: 'minute',\n                      displayFormats: {\n                        minute: 'MMM D, hh:mm:ss'\n                      }\n                    },\n                  }]\n                }}\n              }\n            />\n          }else{\n            graph = <EmptyGraph />;\n          }\n\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default SubscriberVideoLatencyStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Line } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../ErrorMessage';\nimport EmptyGraph from '../../EmptyGraph';\n\nclass PublisherAudioBitRateStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  publishers {\n                    totalCount\n                    resources {\n                      stream {\n                        streamId\n                      }\n                      streamStatsCollection {\n                        resources {\n                          audioBitrateKbps\n                          createdAt\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(meetingArray){\n    let meetingWithMostStats = {};\n    let largestStatsCount = 0;\n    meetingArray.forEach(meeting => {\n      let statsCount = 0;\n      const publisherArray = get(meeting, 'publishers.resources', []);\n      publisherArray.forEach(pubResources => {\n        statsCount += get(pubResources, 'streamStatsCollection.resources.length', 0);\n      });\n      if (statsCount > largestStatsCount) {\n        meetingWithMostStats = meeting;\n        largestStatsCount = statsCount;\n      }\n    });\n    var streamChartData = this.convertStreamArrayToChartData(meetingWithMostStats);\n    return streamChartData;\n  }\n\n  convertStreamArrayToChartData = (meeting) => {\n    const colors = ['#66C5CC', '#F6CF71', '#F89C74', '#DCB0F2', '#87C55F',\n      '#9EB9F3', '#FE88B1', '#C9DB74', '#8BE0A4', '#B497E7', '#D3B484', '#B3B3B3'];\n    let colorIndex = 0;\n    const publisherArray = get(meeting, 'publishers.resources', []);\n    const chartData = publisherArray.reduce((acc, streamData) => {\n      const streamStatsArray = get(streamData, 'streamStatsCollection.resources', []);\n      // Discard short publishers\n      if (streamStatsArray.length < 3) {\n        return acc;\n      }\n      const color = colors[colorIndex % colors.length];\n      colorIndex++;\n      const shortStreamId = streamData.stream.streamId.substring(0, 8);\n      const chartData = {\n        borderColor: color,\n        fill: false,\n        label: `Stream ${shortStreamId}...`,\n        data: streamStatsArray.reduce((acc, streamStats) => {\n            // Discard stats anomolously large bitrates\n            if (streamStats.audioBitrateKbps > 1000) {\n              return acc;\n            }\n            return acc.concat({\n              x: streamStats.createdAt,\n              y: streamStats.audioBitrateKbps,\n            })\n          }, []),\n      };\n\n      return acc.concat(chartData)\n    }, []);\n    return chartData;\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const streamChartData = this.getSubscribedData(meetingResources);\n            graph = <Line\n              data={{\n                datasets: streamChartData\n              }}\n              options={{\n                scales: {\n                  yAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: 'kbps'\n                    }\n                  }],\n                  xAxes: [{\n                    type: 'time',\n                    distribution: 'linear',\n                    time: {\n                      unit: 'minute',\n                      displayFormats: {\n                        minute: 'MMM D, hh:mm:ss'\n                      }\n                    },\n                  }]\n                }}\n              }\n            />\n          }else{\n            graph = <EmptyGraph />;\n          }\n\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default PublisherAudioBitRateStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Line } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../ErrorMessage';\nimport EmptyGraph from '../../EmptyGraph';\n\nclass PublisherAudioPacketLossStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  publishers {\n                    totalCount\n                    resources {\n                      stream {\n                        streamId\n                      }\n                      streamStatsCollection {\n                        resources {\n                          audioPacketLoss\n                          createdAt\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(meetingArray){\n    let meetingWithMostStats = {};\n    let largestStatsCount = 0;\n    meetingArray.forEach(meeting => {\n      let statsCount = 0;\n      const publisherArray = get(meeting, 'publishers.resources', []);\n      publisherArray.forEach(pubResources => {\n        statsCount += get(pubResources, 'streamStatsCollection.resources.length', 0);\n      });\n      if (statsCount > largestStatsCount) {\n        meetingWithMostStats = meeting;\n        largestStatsCount = statsCount;\n      }\n    });\n    var streamChartData = this.convertStreamArrayToChartData(meetingWithMostStats);\n    return streamChartData;\n  }\n\n  convertStreamArrayToChartData = (meeting) => {\n    const colors = ['#66C5CC', '#F6CF71', '#F89C74', '#DCB0F2', '#87C55F',\n      '#9EB9F3', '#FE88B1', '#C9DB74', '#8BE0A4', '#B497E7', '#D3B484', '#B3B3B3'];\n    let colorIndex = 0;\n    const publisherArray = get(meeting, 'publishers.resources', []);\n    const chartData = publisherArray.reduce((acc, streamData) => {\n      const streamStatsArray = get(streamData, 'streamStatsCollection.resources', []);\n      // Discard short publishers\n      if (streamStatsArray.length < 3) {\n        return acc;\n      }\n      const color = colors[colorIndex % colors.length];\n      colorIndex++;\n      const shortStreamId = streamData.stream.streamId.substring(0, 8);\n      const chartData = {\n        borderColor: color,\n        fill: false,\n        label: `Stream ${shortStreamId}...`,\n        data: streamStatsArray.reduce((acc, streamStats) => {\n            // Discard stats anomolously large bitrates\n            if (streamStats.audioPacketLoss > 1000) {\n              return acc;\n            }\n            return acc.concat({\n              x: streamStats.createdAt,\n              y: streamStats.audioPacketLoss,\n            })\n          }, []),\n      };\n      return acc.concat(chartData)\n    }, []);\n    return chartData;\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const streamChartData = this.getSubscribedData(meetingResources);\n            graph = <Line\n              data={{\n                datasets: streamChartData\n              }}\n              options={{\n                scales: {\n                  yAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: '%(Percentage)'\n                    }\n                  }],\n                  xAxes: [{\n                    type: 'time',\n                    distribution: 'linear',\n                    time: {\n                      unit: 'minute',\n                      displayFormats: {\n                        minute: 'MMM D, hh:mm:ss'\n                      }\n                    },\n                  }]\n                }}\n              }\n            />\n          }else{\n            graph = <EmptyGraph />;\n          }\n\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default PublisherAudioPacketLossStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Line } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../ErrorMessage';\nimport EmptyGraph from '../../EmptyGraph';\n\nclass PublisherAudioLatencyStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  publishers {\n                    totalCount\n                    resources {\n                      stream {\n                        streamId\n                      }\n                      streamStatsCollection {\n                        resources {\n                          audioLatencyMs\n                          createdAt\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(meetingArray){\n    let meetingWithMostStats = {};\n    let largestStatsCount = 0;\n    meetingArray.forEach(meeting => {\n      let statsCount = 0;\n      const publisherArray = get(meeting, 'publishers.resources', []);\n      publisherArray.forEach(pubResources => {\n        statsCount += get(pubResources, 'streamStatsCollection.resources.length', 0);\n      });\n      if (statsCount > largestStatsCount) {\n        meetingWithMostStats = meeting;\n        largestStatsCount = statsCount;\n      }\n    });\n    var streamChartData = this.convertStreamArrayToChartData(meetingWithMostStats);\n    return streamChartData;\n  }\n\n  convertStreamArrayToChartData = (meeting) => {\n    const colors = ['#66C5CC', '#F6CF71', '#F89C74', '#DCB0F2', '#87C55F',\n      '#9EB9F3', '#FE88B1', '#C9DB74', '#8BE0A4', '#B497E7', '#D3B484', '#B3B3B3'];\n    let colorIndex = 0;\n    const publisherArray = get(meeting, 'publishers.resources', []);\n    const chartData = publisherArray.reduce((acc, streamData) => {\n      const streamStatsArray = get(streamData, 'streamStatsCollection.resources', []);\n      // Discard short publishers\n      if (streamStatsArray.length < 3) {\n        return acc;\n      }\n      const color = colors[colorIndex % colors.length];\n      colorIndex++;\n      const shortStreamId = streamData.stream.streamId.substring(0, 8);\n      const chartData = {\n        borderColor: color,\n        fill: false,\n        label: `Stream ${shortStreamId}...`,\n        data: streamStatsArray.reduce((acc, streamStats) => {\n            // Discard stats anomolously large bitrates\n            if (streamStats.audioLatencyMs > 1000) {\n              return acc;\n            }\n            return acc.concat({\n              x: streamStats.createdAt,\n              y: streamStats.audioLatencyMs,\n            })\n          }, []),\n      };\n      return acc.concat(chartData)\n    }, []);\n    return chartData;\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const streamChartData = this.getSubscribedData(meetingResources);\n            graph = <Line\n              data={{\n                datasets: streamChartData\n              }}\n              options={{\n                scales: {\n                  yAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: 'milliseconds'\n                    }\n                  }],\n                  xAxes: [{\n                    type: 'time',\n                    distribution: 'linear',\n                    time: {\n                      unit: 'minute',\n                      displayFormats: {\n                        minute: 'MMM D, hh:mm:ss'\n                      }\n                    },\n                  }]\n                }}\n              }\n            />\n          }else{\n            graph = <EmptyGraph />;\n          }\n\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default PublisherAudioLatencyStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Line } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../ErrorMessage';\nimport EmptyGraph from '../../EmptyGraph';\n\nclass SubscriberAudioBitRateStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  subscribers {\n                    totalCount\n                    resources {\n                      stream {\n                        streamId\n                      }\n                      streamStatsCollection {\n                        resources {\n                          audioBitrateKbps\n                          createdAt\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(meetingArray){\n    let meetingWithMostStats = {};\n    let largestStatsCount = 0;\n    meetingArray.forEach(meeting => {\n      let statsCount = 0;\n      const subscriberArray = get(meeting, 'subscribers.resources', []);\n      subscriberArray.forEach(subResources => {\n        statsCount += get(subResources, 'streamStatsCollection.resources.length', 0);\n      });\n      if (statsCount > largestStatsCount) {\n        meetingWithMostStats = meeting;\n        largestStatsCount = statsCount;\n      }\n    });\n    var streamChartData = this.convertStreamArrayToChartData(meetingWithMostStats);\n    return streamChartData;\n  }\n\n  convertStreamArrayToChartData = (meeting) => {\n    const colors = ['#66C5CC', '#F6CF71', '#F89C74', '#DCB0F2', '#87C55F',\n      '#9EB9F3', '#FE88B1', '#C9DB74', '#8BE0A4', '#B497E7', '#D3B484', '#B3B3B3'];\n    let colorIndex = 0;\n    const subscriberArray = get(meeting, 'subscribers.resources', []);\n    const chartData = subscriberArray.reduce((acc, streamData) => {\n      const streamStatsArray = get(streamData, 'streamStatsCollection.resources', []);\n      // Discard short subscribers\n      if (streamStatsArray.length < 3) {\n        return acc;\n      }\n      const color = colors[colorIndex % colors.length];\n      colorIndex++;\n      const shortStreamId = streamData.stream.streamId.substring(0, 8);\n      const chartData = {\n        borderColor: color,\n        fill: false,\n        label: `Stream ${shortStreamId}...`,\n        data: streamStatsArray.reduce((acc, streamStats) => {\n            // Discard stats anomolously large bitrates\n            if (streamStats.audioBitrateKbps > 1000) {\n              return acc;\n            }\n            return acc.concat({\n              x: streamStats.createdAt,\n              y: streamStats.audioBitrateKbps,\n            })\n          }, []),\n      };\n\n      return acc.concat(chartData)\n    }, []);\n    return chartData;\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const streamChartData = this.getSubscribedData(meetingResources);\n            graph = <Line\n              data={{\n                datasets: streamChartData\n              }}\n              options={{\n                scales: {\n                  yAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: 'kbps'\n                    }\n                  }],\n                  xAxes: [{\n                    type: 'time',\n                    distribution: 'linear',\n                    time: {\n                      unit: 'minute',\n                      displayFormats: {\n                        minute: 'MMM D, hh:mm:ss'\n                      }\n                    },\n                  }]\n                }}\n              }\n            />\n          }else{\n            graph = <EmptyGraph />;\n          }\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default SubscriberAudioBitRateStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Line } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../ErrorMessage';\nimport EmptyGraph from '../../EmptyGraph';\n\nclass SubscriberAudioPacketLossStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  subscribers {\n                    totalCount\n                    resources {\n                      stream {\n                        streamId\n                      }\n                      streamStatsCollection {\n                        resources {\n                          audioPacketLoss\n                          createdAt\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(meetingArray){\n    let meetingWithMostStats = {};\n    let largestStatsCount = 0;\n    meetingArray.forEach(meeting => {\n      let statsCount = 0;\n      const subscriberArray = get(meeting, 'subscribers.resources', []);\n      subscriberArray.forEach(subResources => {\n        statsCount += get(subResources, 'streamStatsCollection.resources.length', 0);\n      });\n      if (statsCount > largestStatsCount) {\n        meetingWithMostStats = meeting;\n        largestStatsCount = statsCount;\n      }\n    });\n    var streamChartData = this.convertStreamArrayToChartData(meetingWithMostStats);\n    return streamChartData;\n  }\n\n  convertStreamArrayToChartData = (meeting) => {\n    const colors = ['#66C5CC', '#F6CF71', '#F89C74', '#DCB0F2', '#87C55F',\n      '#9EB9F3', '#FE88B1', '#C9DB74', '#8BE0A4', '#B497E7', '#D3B484', '#B3B3B3'];\n    let colorIndex = 0;\n    const subscriberArray = get(meeting, 'subscribers.resources', []);\n    const chartData = subscriberArray.reduce((acc, streamData) => {\n      const streamStatsArray = get(streamData, 'streamStatsCollection.resources', []);\n      // Discard short subscribers\n      if (streamStatsArray.length < 3) {\n        return acc;\n      }\n      const color = colors[colorIndex % colors.length];\n      colorIndex++;\n      const shortStreamId = streamData.stream.streamId.substring(0, 8);\n      const chartData = {\n        borderColor: color,\n        fill: false,\n        label: `Stream ${shortStreamId}...`,\n        data: streamStatsArray.reduce((acc, streamStats) => {\n            // Discard stats anomolously large bitrates\n            if (streamStats.audioPacketLoss > 1000) {\n              return acc;\n            }\n            return acc.concat({\n              x: streamStats.createdAt,\n              y: streamStats.audioPacketLoss,\n            })\n          }, []),\n      };\n      return acc.concat(chartData)\n    }, []);\n    return chartData;\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const streamChartData = this.getSubscribedData(meetingResources);\n            graph = <Line\n              data={{\n                datasets: streamChartData\n              }}\n              options={{\n                scales: {\n                  yAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: '%(Percentage)'\n                    }\n                  }],\n                  xAxes: [{\n                    type: 'time',\n                    distribution: 'linear',\n                    time: {\n                      unit: 'minute',\n                      displayFormats: {\n                        minute: 'MMM D, hh:mm:ss'\n                      }\n                    },\n                  }]\n                }}\n              }\n            />\n          }else{\n            graph = <EmptyGraph />;\n          }\n\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default SubscriberAudioPacketLossStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Line } from 'react-chartjs-3';\nimport { get } from 'lodash';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../ErrorMessage';\nimport EmptyGraph from '../../EmptyGraph';\n\nclass SubscriberAudioLatencyStats extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  subscribers {\n                    totalCount\n                    resources {\n                      stream {\n                        streamId\n                      }\n                      streamStatsCollection {\n                        resources {\n                          audioLatencyMs\n                          createdAt\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(meetingArray){\n    let meetingWithMostStats = {};\n    let largestStatsCount = 0;\n    meetingArray.forEach(meeting => {\n      let statsCount = 0;\n      const subscriberArray = get(meeting, 'subscribers.resources', []);\n      subscriberArray.forEach(subResources => {\n        statsCount += get(subResources, 'streamStatsCollection.resources.length', 0);\n      });\n      if (statsCount > largestStatsCount) {\n        meetingWithMostStats = meeting;\n        largestStatsCount = statsCount;\n      }\n    });\n    var streamChartData = this.convertStreamArrayToChartData(meetingWithMostStats);\n    return streamChartData;\n  }\n\n  convertStreamArrayToChartData = (meeting) => {\n    const colors = ['#66C5CC', '#F6CF71', '#F89C74', '#DCB0F2', '#87C55F',\n      '#9EB9F3', '#FE88B1', '#C9DB74', '#8BE0A4', '#B497E7', '#D3B484', '#B3B3B3'];\n    let colorIndex = 0;\n    const subscriberArray = get(meeting, 'subscribers.resources', []);\n    const chartData = subscriberArray.reduce((acc, streamData) => {\n      const streamStatsArray = get(streamData, 'streamStatsCollection.resources', []);\n      // Discard short subscribers\n      if (streamStatsArray.length < 3) {\n        return acc;\n      }\n      const color = colors[colorIndex % colors.length];\n      colorIndex++;\n      const shortStreamId = streamData.stream.streamId.substring(0, 8);\n      const chartData = {\n        borderColor: color,\n        fill: false,\n        label: `Stream ${shortStreamId}...`,\n        data: streamStatsArray.reduce((acc, streamStats) => {\n            // Discard stats anomolously large bitrates\n            if (streamStats.audioLatencyMs > 1000) {\n              return acc;\n            }\n            return acc.concat({\n              x: streamStats.createdAt,\n              y: streamStats.audioLatencyMs,\n            })\n          }, []),\n      };\n      return acc.concat(chartData)\n    }, []);\n    return chartData;\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          let graph;\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const streamChartData = this.getSubscribedData(meetingResources);\n            graph = <Line\n              data={{\n                datasets: streamChartData\n              }}\n              options={{\n                scales: {\n                  yAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: 'milliseconds'\n                    }\n                  }],\n                  xAxes: [{\n                    type: 'time',\n                    distribution: 'linear',\n                    time: {\n                      unit: 'minute',\n                      displayFormats: {\n                        minute: 'MMM D, hh:mm:ss'\n                      }\n                    },\n                  }]\n                }}\n              }\n            />\n          }else{\n            graph = <EmptyGraph />;\n          }\n\n          return graph;\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default SubscriberAudioLatencyStats;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { get } from 'lodash';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../ErrorMessage';\n\nclass ConnectionStreamsTable extends Component {\n  constructor(props){\n    super();\n    const apiKey = props.projectId;\n    const sessionId = `\"${props.sessionId}\"`;\n    const query = gql`\n      {\n        project(projectId: ${apiKey}) {\n        sessionData {\n          sessions(sessionIds: [${sessionId}]) {\n            resources {\n              meetings {\n                resources {\n                  connections {\n                    totalCount\n                    maxConcurrent\n                    resources {\n                      guid\n                      connectionId\n                      publishers {\n                        totalCount\n                        resources {\n                          connectionId\n                          createdAt\n                          destroyedAt\n                          stream {\n                            streamId\n                            hasAudioTrack\n                            hasVideoTrack\n                            videoType\n                          }\n                          streamStatsCollection {\n                            totalCount\n                            resources {\n                              createdAt\n                              hasAudio\n                              hasVideo\n                            }\n                          }\n                          subscribers {\n                            totalCount\n                            resources {\n                              subscriberId\n                              connectionId\n                              createdAt\n                              destroyedAt\n                              stream {\n                                streamId\n                                hasAudioTrack\n                                hasVideoTrack\n                                videoType\n                              }\n                              streamStatsCollection {\n                                totalCount\n                                resources {\n                                  createdAt\n                                  subscribeToAudio\n                                  subscribeToVideo\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        }\n      }\n    `;\n    this.state = {\n      query: query\n    }\n  }\n\n  getSubscribedData(resources){\n    let connectionData = []\n    resources.forEach((connection, index) => {\n      let connectionDetails = [];\n      connectionDetails.push(index+1);\n      connectionDetails.push(connection.connectionId);\n      connectionDetails.push(get(connection, 'publishers.totalCount', 0));\n      // const publisherArray = get(meeting, 'publishers.resources', []);\n      // let streamStatsCount = 0;\n      // let subscribersStatsCount = 0;\n      // publisherArray.forEach(pubResources => {\n      //   streamStatsCount += get(pubResources, 'streamStatsCollection.totalCount', 0);\n      //   subscribersStatsCount += get(pubResources, 'subscribers.totalCount', 0);\n      // });\n      // connectionDetails['totalStreams'] = streamStatsCount;\n      // connectionDetails['totalSubscribers'] = subscribersStatsCount;\n\n      connectionData.push(connectionDetails);\n    })\n    // let distinctData = resources.filter(x => x.browser != null);\n    // var chartData = {};\n    // distinctData.forEach(function (obj) {\n    //   var propName = obj.browser;\n    //   chartData[propName] = chartData[propName] ? chartData[propName] + 1 : 1;\n    // });\n    return connectionData;\n  }\n\n  createTable = (connectionData) => {\n    let table = []\n    // Outer loop to create parent\n    if (connectionData.length > 0){\n      for (let i = 0; i < connectionData.length; i++) {\n        let children = []\n        //Inner loop to create children\n        for (let j = 0; j < connectionData[i].length; j++) {\n          children.push(<td key={`${j+1}`}>{`${connectionData[i][j]}`}</td>)\n        }\n        //Create the parent and add the children\n        table.push(<tr key={`${i+1}`}>{children}</tr>)\n      }\n    }else{\n      let children = []\n      children.push(<td key=\"No values\" colSpan=\"3\" className=\"text-center\">No connection data available from source.</td>);\n      table.push(<tr key=\"No rows\">{children}</tr>)\n    }\n    return table\n  }\n\n  render() {\n    return (\n      <Query query={this.state.query}>\n        {({ loading, error, data }) => {\n          if (loading) return <Loading />;\n          if (error) return <ErrorMessage error={error.message} />;\n          const resources = get(data, 'project.sessionData.sessions.resources', []);\n          var connectionData = [];\n          if (resources.length > 0){\n            const meetingResources = resources.map(item => get(item, 'meetings.resources', []))[0];\n            const connectionResources = meetingResources.map(item => get(item, 'connections.resources', []))[0];\n            connectionData = this.getSubscribedData(connectionResources);\n          }\n          return (\n            <table className=\"table table-bordered\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">Connection ID</th>\n                  <th scope=\"col\">Total Publishers</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.createTable(connectionData)}\n              </tbody>\n            </table>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default ConnectionStreamsTable;\n","import React from 'react';\nimport NavBar from './NavBar';\nimport { getToken, INSIGHTS_URL } from  './../util';\nimport urlJoin from 'url-join';\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloProvider } from 'react-apollo';\nimport SessionSideBar from './SessionSideBar';\nimport StreamStats from './sessions/StreamStats';\nimport PublisherVideoBitRateStats from './sessions/publishers/PublisherVideoBitRateStats';\nimport BrowserStats from './sessions/BrowserStats';\nimport BrowserVersionStats from './sessions/BrowserVersionStats';\nimport ChartContainer from './ChartContainer';\nimport CountryStats from './sessions/CountryStats';\nimport SdkTypeStats from './sessions/SdkTypeStats';\nimport SdkVersionStats from './sessions/SdkVersionStats';\nimport PublisherVideoPacketLossStats from './sessions/publishers/PublisherVideoPacketLossStats';\nimport PublisherVideoLatencyStats from './sessions/publishers/PublisherVideoLatencyStats';\nimport SubscriberVideoBitRateStats from './sessions/subscribers/SubscriberVideoBitRateStats';\nimport SubscriberVideoPacketLossStats from './sessions/subscribers/SubscriberVideoPacketLossStats';\nimport SubscriberVideoLatencyStats from './sessions/subscribers/SubscriberVideoLatencyStats';\nimport PublisherAudioBitRateStats from './sessions/publishers/PublisherAudioBitRateStats';\nimport PublisherAudioPacketLossStats from './sessions/publishers/PublisherAudioPacketLossStats';\nimport PublisherAudioLatencyStats from './sessions/publishers/PublisherAudioLatencyStats';\nimport SubscriberAudioBitRateStats from './sessions/subscribers/SubscriberAudioBitRateStats';\nimport SubscriberAudioPacketLossStats from './sessions/subscribers/SubscriberAudioPacketLossStats';\nimport SubscriberAudioLatencyStats from './sessions/subscribers/SubscriberAudioLatencyStats';\nimport ConnectionStreamsTable from './sessions/connections/ConnectionStreamsTable';\n\nclass SessionReport extends React.Component {\n  constructor(props) {\n    super(props);\n    const getProject = JSON.parse(localStorage.getItem('session'));\n    // TODO: Redirect to home page when localstorage is deleted.\n    // if (!getProject) {\n    //   this.props.history.push('/');\n    // }\n    const {project_id, project_secret, query_type, session_id} = getProject;\n    this.state = {\n      projectId: project_id,\n      projectSecret: project_secret,\n      queryType: query_type,\n      sessionId: session_id,\n      client: ''\n    }\n  }\n\n  componentDidMount(){\n    const { projectId, projectSecret } = this.state;\n    const token = getToken(projectId, projectSecret);\n    const client = new ApolloClient({\n      link: new HttpLink({\n        uri: urlJoin(INSIGHTS_URL, '/graphql'),\n        headers: { 'X-OPENTOK-AUTH': token },\n      }),\n      cache: new InMemoryCache(),\n    });\n    this.setState({ client })\n  }\n\n  render() {\n    const { client, projectId, sessionId } = this.state;\n    if(client === ''){\n      return null;\n    }\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"container-fluid p-0\">\n          <NavBar title=\"Session Dashboard\" type=\"session\" projectId={projectId} sessionId={sessionId} />\n          <div className=\"row my-5 mx-0 header-spacer\">\n            <div className=\"col-2 p-0\">\n              <SessionSideBar type=\"session\" projectId={projectId} sessionId={sessionId}/>\n            </div>\n            <div className=\"col-10 pr-0 scroll-element\">\n              <div data-spy=\"scroll\" data-target=\"#navbar-example3\" data-offset=\"0\">\n                <div id=\"totalUnits\">\n                  <h2 className=\"text-capitalize my-4 border-bottom\">Total Units</h2>\n                  <StreamStats projectId={projectId} sessionId={sessionId}/>\n                </div>\n                <div id=\"quality-stats\">\n                  <h2 className=\"text-capitalize my-4 border-bottom\">statistics</h2>\n\n                  <ChartContainer titleIcon=\"area\" title=\"Browser Stats\" scrollId=\"stats-by-browser\">\n                    <BrowserStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n                  <ChartContainer titleIcon=\"area\" title=\"Browser Version Stats\" scrollId=\"stats-by-browser-version\">\n                    <BrowserVersionStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n                  <ChartContainer titleIcon=\"area\" title=\"Country Stats\" scrollId=\"stats-by-location\">\n                    <CountryStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n                  <ChartContainer titleIcon=\"area\" title=\"SDK Type Stats\" scrollId=\"stats-by-sdk-distribution\">\n                    <SdkTypeStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n                  <ChartContainer titleIcon=\"area\" title=\"SDK Version Stats\" scrollId=\"stats-by-sdk-version\">\n                    <SdkVersionStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n                </div>\n                <div id=\"publisher-stats\">\n                  <h2 className=\"text-capitalize my-4 border-bottom\">publisher details</h2>\n                  <ChartContainer titleIcon=\"area\" title=\"Publisher Video Bitrate Stats\" scrollId=\"publisher-stats-by-video-bitrate\">\n                    <PublisherVideoBitRateStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n                  <ChartContainer titleIcon=\"area\" title=\"Publisher Video Packet Loss Stats\" scrollId=\"publisher-stats-by-video-packet-loss\">\n                    <PublisherVideoPacketLossStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n                  <ChartContainer titleIcon=\"area\" title=\"Publisher Video Latency Stats\" scrollId=\"publisher-stats-by-video-latency\">\n                    <PublisherVideoLatencyStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n                  <ChartContainer titleIcon=\"area\" title=\"Publisher Audio Bitrate Stats\" scrollId=\"publisher-stats-by-audio-bitrate\">\n                    <PublisherAudioBitRateStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n                  <ChartContainer titleIcon=\"area\" title=\"Publisher Audio Packet Loss Stats\" scrollId=\"publisher-stats-by-audio-packet-loss\">\n                    <PublisherAudioPacketLossStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n                  <ChartContainer titleIcon=\"area\" title=\"Publisher Audio Latency Stats\" scrollId=\"publisher-stats-by-audio-latency\">\n                    <PublisherAudioLatencyStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n                </div>\n                <div id=\"subscriber-stats\">\n                  <h2 className=\"text-capitalize my-4 border-bottom\">subscriber details</h2>\n                  <ChartContainer titleIcon=\"area\" title=\"Subscriber Video Bitrate Stats\" scrollId=\"subscriber-stats-by-video-bitrate\">\n                    <SubscriberVideoBitRateStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n                  <ChartContainer titleIcon=\"area\" title=\"Subscriber Video Packet Loss Stats\" scrollId=\"subscriber-stats-by-video-packet-loss\">\n                    <SubscriberVideoPacketLossStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n                  <ChartContainer titleIcon=\"area\" title=\"Subscriber Video Latency Stats\" scrollId=\"subscriber-stats-by-video-latency\">\n                    <SubscriberVideoLatencyStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n\n                  <ChartContainer titleIcon=\"area\" title=\"Subscriber Audio Bitrate Stats\" scrollId=\"subscriber-stats-by-audio-bitrate\">\n                    <SubscriberAudioBitRateStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n                  <ChartContainer titleIcon=\"area\" title=\"Subscriber Audio Packet Loss Stats\" scrollId=\"subscriber-stats-by-audio-packet-loss\">\n                    <SubscriberAudioPacketLossStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n                  <ChartContainer titleIcon=\"area\" title=\"Subscriber Audio Latency Stats\" scrollId=\"subscriber-stats-by-audio-latency\">\n                    <SubscriberAudioLatencyStats projectId={projectId} sessionId={sessionId} />\n                  </ChartContainer>\n                </div>\n                <div id=\"connection-details\" className=\"m-3\">\n                  <h2 className=\"text-capitalize my-4 border-bottom\">Connections details</h2>\n                  <ConnectionStreamsTable projectId={projectId} sessionId={sessionId} scrollId=\"connection-stats\"/>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default SessionReport;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport './App.css';\nimport OpentokForm from './components/OpentokForm';\nimport ProjectReport from './components/ProjectReport';\nimport SessionReport from './components/SessionReport';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={OpentokForm} />\n        <Route path=\"/project\" component={ProjectReport} />\n        <Route path=\"/session\" component={SessionReport} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}